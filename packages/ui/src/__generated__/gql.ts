/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "\nmutation CreateListing(\n  $userId: String!\n  $type: PlaceType!\n  $country: String!\n  $state: String!\n  $district: String!\n  $city: String!\n  $street: String!\n  $pincode: Int!\n  $latitude: Float!\n  $longitude: Float!\n  $allowedVehicles: [Vehicle!]!\n  $basePrice: Float!\n  $pphbi: Float!\n  $pphcy: Float!\n  $pphcr: Float!\n  $plph: Float!\n  $photos: [String!]!\n  $name: String\n  $landmark: String\n) {\n  ListingMutation {\n    createListing(\n      userId: $userId\n      type: $type\n      country: $country\n      state: $state\n      district: $district\n      city: $city\n      street: $street\n      pincode: $pincode\n      latitude: $latitude\n      longitude: $longitude\n      allowedVehicles: $allowedVehicles\n      basePrice: $basePrice\n      pphbi: $pphbi\n      pphcy: $pphcy\n      pphcr: $pphcr\n      plph: $plph\n      photos: $photos\n      name: $name\n      landmark: $landmark\n    )\n  }\n}\n": typeof types.CreateListingDocument,
    "\nmutation Lock(\n  $listingId: String!\n  $userId: String!\n  $startDate: Int!\n  $endDate: Int!\n  $basePrice: Float!\n  $parkingPrice: Float!\n  $totalPrice: Float!\n  $ipFee: Float!\n) {\n  BookingMutation {\n    lock(\n      listingId: $listingId\n      userId: $userId\n      startDate: $startDate\n      endDate: $endDate\n      basePrice: $basePrice\n      parkingPrice: $parkingPrice\n      totalPrice: $totalPrice\n      ipFee: $ipFee\n    ) {\n      bookingId\n      orderId\n      payment_session_id\n      message\n    }\n  }\n}\n": typeof types.LockDocument,
    "\nmutation CreateVendor(\n  $name: String\n  $email: String\n  $phone: String\n  $bank: VendorBankInput\n  $kyc_details: VendorKYCInput\n  $vendor_id: String\n) {\n  VendorMutation {\n    createVendor(\n      name: $name\n      email: $email\n      phone: $phone\n      bank: $bank\n      kyc_details: $kyc_details\n      vendor_id: $vendor_id\n    )\n  }\n}\n": typeof types.CreateVendorDocument,
    "\nquery GetEarningsDashboard($userId: String!, $vendorId: String!) {\n  VendorQuery {\n    getEarningsDashboard(userId: $userId) {\n      earnings {\n        currentMonth {\n          totalBookings\n          totalRevenue\n          totalNetProfit\n          avgBookingValue\n        }\n        previousMonth {\n          totalBookings\n          totalRevenue\n          totalNetProfit\n          avgBookingValue\n        }\n        netPL {\n          totalBookingsPLPercent\n          totalRevenuePLPercent\n          totalNetProfitPLPercent\n          avgBookingValuePLPercent\n        }\n      }\n      vendorBalance(vendorId: $vendorId) {\n        vendor_id\n        vendor_unsettled\n      }\n    }\n  }\n}\n": typeof types.GetEarningsDashboardDocument,
    "\nquery GET_PROFILE($userId: String!) {\n  UserQuery {\n    getProfile(userId: $userId) {\n      userId\n      firstName\n      lastName\n      emails\n      timeJoined\n      phoneNumber\n      kyc {\n        uidai\n        verified\n      }\n      country\n      state\n      district\n      city\n      street\n      pincode\n      latitude\n      longitude\n      name\n      landmark\n      reviews\n      ratings\n    }\n  }\n}\n": typeof types.Get_ProfileDocument,
    "\nquery GET_RECON_DATA(\n  $orderIds: [String!]!\n  $limit: Int!\n  $entityType: EntityType!\n) {\n  VendorQuery {\n    getReconData(orderIds: $orderIds, limit: $limit, entity_type: $entityType) {\n      amount\n      merchant_order_id\n      tx_time\n      settled\n      entity_id\n      currency\n      sale_type\n      customer_email\n      customer_phone\n      added_on\n      entity_type\n      settlement_eligibility_time\n      merchant_settlement_utr\n      payment_utr\n      merchant_vendor_commission\n      split_service_charge\n      split_service_tax\n      pg_service_tax\n      pg_service_charge\n      pg_charge_postpaid\n      merchant_settlement_id\n      tags\n      settlement_initiated_on\n      settlement_time\n      eligible_split_balance\n      order_splits {\n        split {\n          merchant_vendor_id\n          percentage\n          tags\n        }\n      }\n      merchant_vendor_id\n      vendor_settlement_time\n      vendor_settlement_initiated_on\n      vendor_settlement_eligibility_time\n      vendor_settlement_id\n      vendor_commission\n      vendor_pg_service_charge\n      vendor_pg_service_tax\n      status\n    }\n  }\n}\n\n": typeof types.Get_Recon_DataDocument,
    "\nquery GET_TRIP_DETAILED($userId: String!, $id: String!) {\n  BookingQuery {\n    buyerBookings(userId: $userId, id: $id) {\n      booking {\n        id\n        listingId\n        userId\n        startDate\n        endDate\n        status\n        lockedAt\n        basePrice\n        parkingPrice\n        totalPrice\n        ipFee\n        penalty\n        createdAt\n        updatedAt\n        payments {\n          bookingId\n          userId\n          orderId\n          paymentType\n          createdAt\n          updatedAt\n          order {\n            cart_details\n            cf_order_id\n            created_at\n            customer_details {\n              customer_id\n              customer_name\n              customer_email\n              customer_phone\n              customer_uid\n            }\n            entity\n            order_amount\n            order_currency\n            order_expiry_time\n            order_id\n            order_meta {\n              return_url\n              notify_url\n              payment_methods\n            }\n            order_note\n            order_splits {\n              vendor_id\n              amount\n              percentage\n              tags\n            }\n            order_status\n            order_tags\n            payment_session_id\n            terminal_data\n          }\n        }\n        otp {\n          bookingId\n          otp\n          expiresAt\n        }\n      }\n      listing {\n        userId\n        type\n        country\n        state\n        district\n        city\n        street\n        pincode\n        latitude\n        longitude\n        name\n        landmark\n        allowedVehicles\n        basePrice\n        pphbi\n        pphcy\n        pphcr\n        plph\n        photos\n        id\n        rating\n        createdAt\n        updatedAt\n        user {\n          firstName\n          lastName\n          timeJoined\n        }\n      }\n    }\n  }\n}\n    ": typeof types.Get_Trip_DetailedDocument,
    "\nquery GET_TRIPS($userId: String, $buyerBookingsId: String, $status: BookingStatus) {\n  BookingQuery {\n    buyerBookings(userId: $userId, id: $buyerBookingsId, status: $status) {\n      booking {\n        id\n        listingId\n        userId\n        startDate\n        endDate\n        status\n        lockedAt\n        basePrice\n        parkingPrice\n        totalPrice\n        ipFee\n        penalty\n        createdAt\n        updatedAt\n        payments {\n          bookingId\n          userId\n          orderId\n          paymentType\n          createdAt\n          updatedAt\n          order {\n            cart_details\n            cf_order_id\n            created_at\n            customer_details {\n              customer_id\n              customer_name\n              customer_email\n              customer_phone\n              customer_uid\n            }\n            entity\n            order_amount\n            order_currency\n            order_expiry_time\n            order_id\n            order_meta {\n              return_url\n              notify_url\n              payment_methods\n            }\n            order_note\n            order_splits {\n              vendor_id\n              amount\n              percentage\n              tags\n            }\n            order_status\n            order_tags\n            payment_session_id\n            terminal_data\n          }\n        }\n        otp {\n          bookingId\n          otp\n          expiresAt\n        }\n      }\n      listing {\n        userId\n        type\n        country\n        state\n        district\n        city\n        street\n        pincode\n        latitude\n        longitude\n        name\n        landmark\n        allowedVehicles\n        basePrice\n        pphbi\n        pphcy\n        pphcr\n        plph\n        photos\n        id\n        isOpen\n        rating\n        createdAt\n        updatedAt\n        user {\n          userId\n          firstName\n          lastName\n          emails\n          timeJoined\n          phoneNumber\n          kyc {\n            uidai\n            verified\n          }\n          country\n          state\n          district\n          city\n          street\n          pincode\n          latitude\n          longitude\n          name\n          landmark\n          reviews\n          ratings\n        }\n        reviews {\n          id\n          listingId\n          userId\n          rating\n          location\n          cleanliness\n          communication\n          value\n          accuracy\n          description\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n}\n    ": typeof types.Get_TripsDocument,
    "\nquery GetVendor($vendorId: String!) {\n  VendorQuery {\n    getVendor(vendorId: $vendorId) {\n      name\n      email\n      phone\n      bank {\n        account_number\n        account_holder\n        ifsc\n      }\n      kyc_details {\n        account_type\n        business_type\n        pan\n      }\n      vendor_id\n      status\n      verify_account\n      dashboard_access\n      schedule_option {\n        settlement_schedule_message\n        schedule_id\n        merchant_default\n      }\n      related_docs {\n        doc_name\n        doc_value\n        status\n        remarks\n      }\n    }\n  }\n}\n  ": typeof types.GetVendorDocument,
    "\nquery HostBookings($userId: String, $status: BookingStatus!) {\n  ListingQuery {\n    hostBookings(userId: $userId) {\n      bookings(status: $status) {\n        booking {\n          id\n          listingId\n          userId\n          startDate\n          endDate\n          status\n          lockedAt\n          basePrice\n          parkingPrice\n          totalPrice\n          ipFee\n          penalty\n          createdAt\n          updatedAt\n          user {\n            userId\n            firstName\n            lastName\n            emails\n            timeJoined\n            phoneNumber\n            kyc {\n              uidai\n              verified\n            }\n            country\n            state\n            district\n            city\n            street\n            pincode\n            latitude\n            longitude\n            name\n            landmark\n            reviews\n            ratings\n          }\n          payments {\n            bookingId\n            userId\n            orderId\n            paymentType\n            createdAt\n            updatedAt\n            order {\n              cart_details\n              cf_order_id\n              created_at\n              customer_details {\n                customer_id\n                customer_name\n                customer_email\n                customer_phone\n                customer_uid\n              }\n              entity\n              order_amount\n              order_currency\n              order_expiry_time\n              order_id\n              order_meta {\n                return_url\n                notify_url\n                payment_methods\n              }\n              order_note\n              order_splits {\n                vendor_id\n                amount\n                percentage\n                tags\n              }\n              order_status\n              order_tags\n              payment_session_id\n              terminal_data\n            }\n          }\n          otp {\n            bookingId\n            otp\n            expiresAt\n          }\n        }\n        listing {\n          userId\n          type\n          country\n          state\n          district\n          city\n          street\n          pincode\n          latitude\n          longitude\n          name\n          landmark\n          allowedVehicles\n          basePrice\n          pphbi\n          pphcy\n          pphcr\n          plph\n          photos\n          id\n          isOpen\n          rating\n          createdAt\n          updatedAt\n          user {\n            userId\n            firstName\n            lastName\n            emails\n            timeJoined\n            phoneNumber\n            kyc {\n              uidai\n              verified\n            }\n            country\n            state\n            district\n            city\n            street\n            pincode\n            latitude\n            longitude\n            name\n            landmark\n            reviews\n            ratings\n          }\n          reviews {\n            id\n            listingId\n            userId\n            rating\n            location\n            cleanliness\n            communication\n            value\n            accuracy\n            description\n            createdAt\n            updatedAt\n          }\n        }\n      }\n    }\n  }\n}\n": typeof types.HostBookingsDocument,
    "\nquery HOST_LISTINGS($userId: String, $id: String) {\n  ListingQuery {\n    hostListings(userId: $userId, id: $id) {\n      userId\n      type\n      country\n      state\n      district\n      city\n      street\n      pincode\n      latitude\n      longitude\n      name\n      landmark\n      allowedVehicles\n      basePrice\n      pphbi\n      pphcy\n      pphcr\n      plph\n      photos\n      id\n      isOpen\n      rating\n      createdAt\n      updatedAt\n      user {\n        userId\n        firstName\n        lastName\n        emails\n        timeJoined\n        phoneNumber\n        kyc {\n          uidai\n          verified\n        }\n        country\n        state\n        district\n        city\n        street\n        pincode\n        latitude\n        longitude\n        name\n        landmark\n        reviews\n        ratings\n      }\n      reviews {\n        id\n        listingId\n        userId\n        rating\n        location\n        cleanliness\n        communication\n        value\n        accuracy\n        description\n        createdAt\n        updatedAt\n      }\n    }\n  }\n}\n\n": typeof types.Host_ListingsDocument,
    "\nquery SearchListings(\n  $street: String\n  $vehicleType: Vehicle\n  $startDate: Int\n  $endDate: Int\n) {\n  ListingQuery {\n    searchListings(\n      street: $street\n      vehicleType: $vehicleType\n      startDate: $startDate\n      endDate: $endDate\n    ) {\n      userId\n      type\n      country\n      state\n      district\n      city\n      street\n      pincode\n      latitude\n      longitude\n      name\n      landmark\n      allowedVehicles\n      basePrice\n      pphbi\n      pphcy\n      pphcr\n      plph\n      photos\n      id\n      isOpen\n      rating\n      createdAt\n      updatedAt\n    }\n  }\n}\n\n": typeof types.SearchListingsDocument,
};
const documents: Documents = {
    "\nmutation CreateListing(\n  $userId: String!\n  $type: PlaceType!\n  $country: String!\n  $state: String!\n  $district: String!\n  $city: String!\n  $street: String!\n  $pincode: Int!\n  $latitude: Float!\n  $longitude: Float!\n  $allowedVehicles: [Vehicle!]!\n  $basePrice: Float!\n  $pphbi: Float!\n  $pphcy: Float!\n  $pphcr: Float!\n  $plph: Float!\n  $photos: [String!]!\n  $name: String\n  $landmark: String\n) {\n  ListingMutation {\n    createListing(\n      userId: $userId\n      type: $type\n      country: $country\n      state: $state\n      district: $district\n      city: $city\n      street: $street\n      pincode: $pincode\n      latitude: $latitude\n      longitude: $longitude\n      allowedVehicles: $allowedVehicles\n      basePrice: $basePrice\n      pphbi: $pphbi\n      pphcy: $pphcy\n      pphcr: $pphcr\n      plph: $plph\n      photos: $photos\n      name: $name\n      landmark: $landmark\n    )\n  }\n}\n": types.CreateListingDocument,
    "\nmutation Lock(\n  $listingId: String!\n  $userId: String!\n  $startDate: Int!\n  $endDate: Int!\n  $basePrice: Float!\n  $parkingPrice: Float!\n  $totalPrice: Float!\n  $ipFee: Float!\n) {\n  BookingMutation {\n    lock(\n      listingId: $listingId\n      userId: $userId\n      startDate: $startDate\n      endDate: $endDate\n      basePrice: $basePrice\n      parkingPrice: $parkingPrice\n      totalPrice: $totalPrice\n      ipFee: $ipFee\n    ) {\n      bookingId\n      orderId\n      payment_session_id\n      message\n    }\n  }\n}\n": types.LockDocument,
    "\nmutation CreateVendor(\n  $name: String\n  $email: String\n  $phone: String\n  $bank: VendorBankInput\n  $kyc_details: VendorKYCInput\n  $vendor_id: String\n) {\n  VendorMutation {\n    createVendor(\n      name: $name\n      email: $email\n      phone: $phone\n      bank: $bank\n      kyc_details: $kyc_details\n      vendor_id: $vendor_id\n    )\n  }\n}\n": types.CreateVendorDocument,
    "\nquery GetEarningsDashboard($userId: String!, $vendorId: String!) {\n  VendorQuery {\n    getEarningsDashboard(userId: $userId) {\n      earnings {\n        currentMonth {\n          totalBookings\n          totalRevenue\n          totalNetProfit\n          avgBookingValue\n        }\n        previousMonth {\n          totalBookings\n          totalRevenue\n          totalNetProfit\n          avgBookingValue\n        }\n        netPL {\n          totalBookingsPLPercent\n          totalRevenuePLPercent\n          totalNetProfitPLPercent\n          avgBookingValuePLPercent\n        }\n      }\n      vendorBalance(vendorId: $vendorId) {\n        vendor_id\n        vendor_unsettled\n      }\n    }\n  }\n}\n": types.GetEarningsDashboardDocument,
    "\nquery GET_PROFILE($userId: String!) {\n  UserQuery {\n    getProfile(userId: $userId) {\n      userId\n      firstName\n      lastName\n      emails\n      timeJoined\n      phoneNumber\n      kyc {\n        uidai\n        verified\n      }\n      country\n      state\n      district\n      city\n      street\n      pincode\n      latitude\n      longitude\n      name\n      landmark\n      reviews\n      ratings\n    }\n  }\n}\n": types.Get_ProfileDocument,
    "\nquery GET_RECON_DATA(\n  $orderIds: [String!]!\n  $limit: Int!\n  $entityType: EntityType!\n) {\n  VendorQuery {\n    getReconData(orderIds: $orderIds, limit: $limit, entity_type: $entityType) {\n      amount\n      merchant_order_id\n      tx_time\n      settled\n      entity_id\n      currency\n      sale_type\n      customer_email\n      customer_phone\n      added_on\n      entity_type\n      settlement_eligibility_time\n      merchant_settlement_utr\n      payment_utr\n      merchant_vendor_commission\n      split_service_charge\n      split_service_tax\n      pg_service_tax\n      pg_service_charge\n      pg_charge_postpaid\n      merchant_settlement_id\n      tags\n      settlement_initiated_on\n      settlement_time\n      eligible_split_balance\n      order_splits {\n        split {\n          merchant_vendor_id\n          percentage\n          tags\n        }\n      }\n      merchant_vendor_id\n      vendor_settlement_time\n      vendor_settlement_initiated_on\n      vendor_settlement_eligibility_time\n      vendor_settlement_id\n      vendor_commission\n      vendor_pg_service_charge\n      vendor_pg_service_tax\n      status\n    }\n  }\n}\n\n": types.Get_Recon_DataDocument,
    "\nquery GET_TRIP_DETAILED($userId: String!, $id: String!) {\n  BookingQuery {\n    buyerBookings(userId: $userId, id: $id) {\n      booking {\n        id\n        listingId\n        userId\n        startDate\n        endDate\n        status\n        lockedAt\n        basePrice\n        parkingPrice\n        totalPrice\n        ipFee\n        penalty\n        createdAt\n        updatedAt\n        payments {\n          bookingId\n          userId\n          orderId\n          paymentType\n          createdAt\n          updatedAt\n          order {\n            cart_details\n            cf_order_id\n            created_at\n            customer_details {\n              customer_id\n              customer_name\n              customer_email\n              customer_phone\n              customer_uid\n            }\n            entity\n            order_amount\n            order_currency\n            order_expiry_time\n            order_id\n            order_meta {\n              return_url\n              notify_url\n              payment_methods\n            }\n            order_note\n            order_splits {\n              vendor_id\n              amount\n              percentage\n              tags\n            }\n            order_status\n            order_tags\n            payment_session_id\n            terminal_data\n          }\n        }\n        otp {\n          bookingId\n          otp\n          expiresAt\n        }\n      }\n      listing {\n        userId\n        type\n        country\n        state\n        district\n        city\n        street\n        pincode\n        latitude\n        longitude\n        name\n        landmark\n        allowedVehicles\n        basePrice\n        pphbi\n        pphcy\n        pphcr\n        plph\n        photos\n        id\n        rating\n        createdAt\n        updatedAt\n        user {\n          firstName\n          lastName\n          timeJoined\n        }\n      }\n    }\n  }\n}\n    ": types.Get_Trip_DetailedDocument,
    "\nquery GET_TRIPS($userId: String, $buyerBookingsId: String, $status: BookingStatus) {\n  BookingQuery {\n    buyerBookings(userId: $userId, id: $buyerBookingsId, status: $status) {\n      booking {\n        id\n        listingId\n        userId\n        startDate\n        endDate\n        status\n        lockedAt\n        basePrice\n        parkingPrice\n        totalPrice\n        ipFee\n        penalty\n        createdAt\n        updatedAt\n        payments {\n          bookingId\n          userId\n          orderId\n          paymentType\n          createdAt\n          updatedAt\n          order {\n            cart_details\n            cf_order_id\n            created_at\n            customer_details {\n              customer_id\n              customer_name\n              customer_email\n              customer_phone\n              customer_uid\n            }\n            entity\n            order_amount\n            order_currency\n            order_expiry_time\n            order_id\n            order_meta {\n              return_url\n              notify_url\n              payment_methods\n            }\n            order_note\n            order_splits {\n              vendor_id\n              amount\n              percentage\n              tags\n            }\n            order_status\n            order_tags\n            payment_session_id\n            terminal_data\n          }\n        }\n        otp {\n          bookingId\n          otp\n          expiresAt\n        }\n      }\n      listing {\n        userId\n        type\n        country\n        state\n        district\n        city\n        street\n        pincode\n        latitude\n        longitude\n        name\n        landmark\n        allowedVehicles\n        basePrice\n        pphbi\n        pphcy\n        pphcr\n        plph\n        photos\n        id\n        isOpen\n        rating\n        createdAt\n        updatedAt\n        user {\n          userId\n          firstName\n          lastName\n          emails\n          timeJoined\n          phoneNumber\n          kyc {\n            uidai\n            verified\n          }\n          country\n          state\n          district\n          city\n          street\n          pincode\n          latitude\n          longitude\n          name\n          landmark\n          reviews\n          ratings\n        }\n        reviews {\n          id\n          listingId\n          userId\n          rating\n          location\n          cleanliness\n          communication\n          value\n          accuracy\n          description\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n}\n    ": types.Get_TripsDocument,
    "\nquery GetVendor($vendorId: String!) {\n  VendorQuery {\n    getVendor(vendorId: $vendorId) {\n      name\n      email\n      phone\n      bank {\n        account_number\n        account_holder\n        ifsc\n      }\n      kyc_details {\n        account_type\n        business_type\n        pan\n      }\n      vendor_id\n      status\n      verify_account\n      dashboard_access\n      schedule_option {\n        settlement_schedule_message\n        schedule_id\n        merchant_default\n      }\n      related_docs {\n        doc_name\n        doc_value\n        status\n        remarks\n      }\n    }\n  }\n}\n  ": types.GetVendorDocument,
    "\nquery HostBookings($userId: String, $status: BookingStatus!) {\n  ListingQuery {\n    hostBookings(userId: $userId) {\n      bookings(status: $status) {\n        booking {\n          id\n          listingId\n          userId\n          startDate\n          endDate\n          status\n          lockedAt\n          basePrice\n          parkingPrice\n          totalPrice\n          ipFee\n          penalty\n          createdAt\n          updatedAt\n          user {\n            userId\n            firstName\n            lastName\n            emails\n            timeJoined\n            phoneNumber\n            kyc {\n              uidai\n              verified\n            }\n            country\n            state\n            district\n            city\n            street\n            pincode\n            latitude\n            longitude\n            name\n            landmark\n            reviews\n            ratings\n          }\n          payments {\n            bookingId\n            userId\n            orderId\n            paymentType\n            createdAt\n            updatedAt\n            order {\n              cart_details\n              cf_order_id\n              created_at\n              customer_details {\n                customer_id\n                customer_name\n                customer_email\n                customer_phone\n                customer_uid\n              }\n              entity\n              order_amount\n              order_currency\n              order_expiry_time\n              order_id\n              order_meta {\n                return_url\n                notify_url\n                payment_methods\n              }\n              order_note\n              order_splits {\n                vendor_id\n                amount\n                percentage\n                tags\n              }\n              order_status\n              order_tags\n              payment_session_id\n              terminal_data\n            }\n          }\n          otp {\n            bookingId\n            otp\n            expiresAt\n          }\n        }\n        listing {\n          userId\n          type\n          country\n          state\n          district\n          city\n          street\n          pincode\n          latitude\n          longitude\n          name\n          landmark\n          allowedVehicles\n          basePrice\n          pphbi\n          pphcy\n          pphcr\n          plph\n          photos\n          id\n          isOpen\n          rating\n          createdAt\n          updatedAt\n          user {\n            userId\n            firstName\n            lastName\n            emails\n            timeJoined\n            phoneNumber\n            kyc {\n              uidai\n              verified\n            }\n            country\n            state\n            district\n            city\n            street\n            pincode\n            latitude\n            longitude\n            name\n            landmark\n            reviews\n            ratings\n          }\n          reviews {\n            id\n            listingId\n            userId\n            rating\n            location\n            cleanliness\n            communication\n            value\n            accuracy\n            description\n            createdAt\n            updatedAt\n          }\n        }\n      }\n    }\n  }\n}\n": types.HostBookingsDocument,
    "\nquery HOST_LISTINGS($userId: String, $id: String) {\n  ListingQuery {\n    hostListings(userId: $userId, id: $id) {\n      userId\n      type\n      country\n      state\n      district\n      city\n      street\n      pincode\n      latitude\n      longitude\n      name\n      landmark\n      allowedVehicles\n      basePrice\n      pphbi\n      pphcy\n      pphcr\n      plph\n      photos\n      id\n      isOpen\n      rating\n      createdAt\n      updatedAt\n      user {\n        userId\n        firstName\n        lastName\n        emails\n        timeJoined\n        phoneNumber\n        kyc {\n          uidai\n          verified\n        }\n        country\n        state\n        district\n        city\n        street\n        pincode\n        latitude\n        longitude\n        name\n        landmark\n        reviews\n        ratings\n      }\n      reviews {\n        id\n        listingId\n        userId\n        rating\n        location\n        cleanliness\n        communication\n        value\n        accuracy\n        description\n        createdAt\n        updatedAt\n      }\n    }\n  }\n}\n\n": types.Host_ListingsDocument,
    "\nquery SearchListings(\n  $street: String\n  $vehicleType: Vehicle\n  $startDate: Int\n  $endDate: Int\n) {\n  ListingQuery {\n    searchListings(\n      street: $street\n      vehicleType: $vehicleType\n      startDate: $startDate\n      endDate: $endDate\n    ) {\n      userId\n      type\n      country\n      state\n      district\n      city\n      street\n      pincode\n      latitude\n      longitude\n      name\n      landmark\n      allowedVehicles\n      basePrice\n      pphbi\n      pphcy\n      pphcr\n      plph\n      photos\n      id\n      isOpen\n      rating\n      createdAt\n      updatedAt\n    }\n  }\n}\n\n": types.SearchListingsDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nmutation CreateListing(\n  $userId: String!\n  $type: PlaceType!\n  $country: String!\n  $state: String!\n  $district: String!\n  $city: String!\n  $street: String!\n  $pincode: Int!\n  $latitude: Float!\n  $longitude: Float!\n  $allowedVehicles: [Vehicle!]!\n  $basePrice: Float!\n  $pphbi: Float!\n  $pphcy: Float!\n  $pphcr: Float!\n  $plph: Float!\n  $photos: [String!]!\n  $name: String\n  $landmark: String\n) {\n  ListingMutation {\n    createListing(\n      userId: $userId\n      type: $type\n      country: $country\n      state: $state\n      district: $district\n      city: $city\n      street: $street\n      pincode: $pincode\n      latitude: $latitude\n      longitude: $longitude\n      allowedVehicles: $allowedVehicles\n      basePrice: $basePrice\n      pphbi: $pphbi\n      pphcy: $pphcy\n      pphcr: $pphcr\n      plph: $plph\n      photos: $photos\n      name: $name\n      landmark: $landmark\n    )\n  }\n}\n"): (typeof documents)["\nmutation CreateListing(\n  $userId: String!\n  $type: PlaceType!\n  $country: String!\n  $state: String!\n  $district: String!\n  $city: String!\n  $street: String!\n  $pincode: Int!\n  $latitude: Float!\n  $longitude: Float!\n  $allowedVehicles: [Vehicle!]!\n  $basePrice: Float!\n  $pphbi: Float!\n  $pphcy: Float!\n  $pphcr: Float!\n  $plph: Float!\n  $photos: [String!]!\n  $name: String\n  $landmark: String\n) {\n  ListingMutation {\n    createListing(\n      userId: $userId\n      type: $type\n      country: $country\n      state: $state\n      district: $district\n      city: $city\n      street: $street\n      pincode: $pincode\n      latitude: $latitude\n      longitude: $longitude\n      allowedVehicles: $allowedVehicles\n      basePrice: $basePrice\n      pphbi: $pphbi\n      pphcy: $pphcy\n      pphcr: $pphcr\n      plph: $plph\n      photos: $photos\n      name: $name\n      landmark: $landmark\n    )\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nmutation Lock(\n  $listingId: String!\n  $userId: String!\n  $startDate: Int!\n  $endDate: Int!\n  $basePrice: Float!\n  $parkingPrice: Float!\n  $totalPrice: Float!\n  $ipFee: Float!\n) {\n  BookingMutation {\n    lock(\n      listingId: $listingId\n      userId: $userId\n      startDate: $startDate\n      endDate: $endDate\n      basePrice: $basePrice\n      parkingPrice: $parkingPrice\n      totalPrice: $totalPrice\n      ipFee: $ipFee\n    ) {\n      bookingId\n      orderId\n      payment_session_id\n      message\n    }\n  }\n}\n"): (typeof documents)["\nmutation Lock(\n  $listingId: String!\n  $userId: String!\n  $startDate: Int!\n  $endDate: Int!\n  $basePrice: Float!\n  $parkingPrice: Float!\n  $totalPrice: Float!\n  $ipFee: Float!\n) {\n  BookingMutation {\n    lock(\n      listingId: $listingId\n      userId: $userId\n      startDate: $startDate\n      endDate: $endDate\n      basePrice: $basePrice\n      parkingPrice: $parkingPrice\n      totalPrice: $totalPrice\n      ipFee: $ipFee\n    ) {\n      bookingId\n      orderId\n      payment_session_id\n      message\n    }\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nmutation CreateVendor(\n  $name: String\n  $email: String\n  $phone: String\n  $bank: VendorBankInput\n  $kyc_details: VendorKYCInput\n  $vendor_id: String\n) {\n  VendorMutation {\n    createVendor(\n      name: $name\n      email: $email\n      phone: $phone\n      bank: $bank\n      kyc_details: $kyc_details\n      vendor_id: $vendor_id\n    )\n  }\n}\n"): (typeof documents)["\nmutation CreateVendor(\n  $name: String\n  $email: String\n  $phone: String\n  $bank: VendorBankInput\n  $kyc_details: VendorKYCInput\n  $vendor_id: String\n) {\n  VendorMutation {\n    createVendor(\n      name: $name\n      email: $email\n      phone: $phone\n      bank: $bank\n      kyc_details: $kyc_details\n      vendor_id: $vendor_id\n    )\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery GetEarningsDashboard($userId: String!, $vendorId: String!) {\n  VendorQuery {\n    getEarningsDashboard(userId: $userId) {\n      earnings {\n        currentMonth {\n          totalBookings\n          totalRevenue\n          totalNetProfit\n          avgBookingValue\n        }\n        previousMonth {\n          totalBookings\n          totalRevenue\n          totalNetProfit\n          avgBookingValue\n        }\n        netPL {\n          totalBookingsPLPercent\n          totalRevenuePLPercent\n          totalNetProfitPLPercent\n          avgBookingValuePLPercent\n        }\n      }\n      vendorBalance(vendorId: $vendorId) {\n        vendor_id\n        vendor_unsettled\n      }\n    }\n  }\n}\n"): (typeof documents)["\nquery GetEarningsDashboard($userId: String!, $vendorId: String!) {\n  VendorQuery {\n    getEarningsDashboard(userId: $userId) {\n      earnings {\n        currentMonth {\n          totalBookings\n          totalRevenue\n          totalNetProfit\n          avgBookingValue\n        }\n        previousMonth {\n          totalBookings\n          totalRevenue\n          totalNetProfit\n          avgBookingValue\n        }\n        netPL {\n          totalBookingsPLPercent\n          totalRevenuePLPercent\n          totalNetProfitPLPercent\n          avgBookingValuePLPercent\n        }\n      }\n      vendorBalance(vendorId: $vendorId) {\n        vendor_id\n        vendor_unsettled\n      }\n    }\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery GET_PROFILE($userId: String!) {\n  UserQuery {\n    getProfile(userId: $userId) {\n      userId\n      firstName\n      lastName\n      emails\n      timeJoined\n      phoneNumber\n      kyc {\n        uidai\n        verified\n      }\n      country\n      state\n      district\n      city\n      street\n      pincode\n      latitude\n      longitude\n      name\n      landmark\n      reviews\n      ratings\n    }\n  }\n}\n"): (typeof documents)["\nquery GET_PROFILE($userId: String!) {\n  UserQuery {\n    getProfile(userId: $userId) {\n      userId\n      firstName\n      lastName\n      emails\n      timeJoined\n      phoneNumber\n      kyc {\n        uidai\n        verified\n      }\n      country\n      state\n      district\n      city\n      street\n      pincode\n      latitude\n      longitude\n      name\n      landmark\n      reviews\n      ratings\n    }\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery GET_RECON_DATA(\n  $orderIds: [String!]!\n  $limit: Int!\n  $entityType: EntityType!\n) {\n  VendorQuery {\n    getReconData(orderIds: $orderIds, limit: $limit, entity_type: $entityType) {\n      amount\n      merchant_order_id\n      tx_time\n      settled\n      entity_id\n      currency\n      sale_type\n      customer_email\n      customer_phone\n      added_on\n      entity_type\n      settlement_eligibility_time\n      merchant_settlement_utr\n      payment_utr\n      merchant_vendor_commission\n      split_service_charge\n      split_service_tax\n      pg_service_tax\n      pg_service_charge\n      pg_charge_postpaid\n      merchant_settlement_id\n      tags\n      settlement_initiated_on\n      settlement_time\n      eligible_split_balance\n      order_splits {\n        split {\n          merchant_vendor_id\n          percentage\n          tags\n        }\n      }\n      merchant_vendor_id\n      vendor_settlement_time\n      vendor_settlement_initiated_on\n      vendor_settlement_eligibility_time\n      vendor_settlement_id\n      vendor_commission\n      vendor_pg_service_charge\n      vendor_pg_service_tax\n      status\n    }\n  }\n}\n\n"): (typeof documents)["\nquery GET_RECON_DATA(\n  $orderIds: [String!]!\n  $limit: Int!\n  $entityType: EntityType!\n) {\n  VendorQuery {\n    getReconData(orderIds: $orderIds, limit: $limit, entity_type: $entityType) {\n      amount\n      merchant_order_id\n      tx_time\n      settled\n      entity_id\n      currency\n      sale_type\n      customer_email\n      customer_phone\n      added_on\n      entity_type\n      settlement_eligibility_time\n      merchant_settlement_utr\n      payment_utr\n      merchant_vendor_commission\n      split_service_charge\n      split_service_tax\n      pg_service_tax\n      pg_service_charge\n      pg_charge_postpaid\n      merchant_settlement_id\n      tags\n      settlement_initiated_on\n      settlement_time\n      eligible_split_balance\n      order_splits {\n        split {\n          merchant_vendor_id\n          percentage\n          tags\n        }\n      }\n      merchant_vendor_id\n      vendor_settlement_time\n      vendor_settlement_initiated_on\n      vendor_settlement_eligibility_time\n      vendor_settlement_id\n      vendor_commission\n      vendor_pg_service_charge\n      vendor_pg_service_tax\n      status\n    }\n  }\n}\n\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery GET_TRIP_DETAILED($userId: String!, $id: String!) {\n  BookingQuery {\n    buyerBookings(userId: $userId, id: $id) {\n      booking {\n        id\n        listingId\n        userId\n        startDate\n        endDate\n        status\n        lockedAt\n        basePrice\n        parkingPrice\n        totalPrice\n        ipFee\n        penalty\n        createdAt\n        updatedAt\n        payments {\n          bookingId\n          userId\n          orderId\n          paymentType\n          createdAt\n          updatedAt\n          order {\n            cart_details\n            cf_order_id\n            created_at\n            customer_details {\n              customer_id\n              customer_name\n              customer_email\n              customer_phone\n              customer_uid\n            }\n            entity\n            order_amount\n            order_currency\n            order_expiry_time\n            order_id\n            order_meta {\n              return_url\n              notify_url\n              payment_methods\n            }\n            order_note\n            order_splits {\n              vendor_id\n              amount\n              percentage\n              tags\n            }\n            order_status\n            order_tags\n            payment_session_id\n            terminal_data\n          }\n        }\n        otp {\n          bookingId\n          otp\n          expiresAt\n        }\n      }\n      listing {\n        userId\n        type\n        country\n        state\n        district\n        city\n        street\n        pincode\n        latitude\n        longitude\n        name\n        landmark\n        allowedVehicles\n        basePrice\n        pphbi\n        pphcy\n        pphcr\n        plph\n        photos\n        id\n        rating\n        createdAt\n        updatedAt\n        user {\n          firstName\n          lastName\n          timeJoined\n        }\n      }\n    }\n  }\n}\n    "): (typeof documents)["\nquery GET_TRIP_DETAILED($userId: String!, $id: String!) {\n  BookingQuery {\n    buyerBookings(userId: $userId, id: $id) {\n      booking {\n        id\n        listingId\n        userId\n        startDate\n        endDate\n        status\n        lockedAt\n        basePrice\n        parkingPrice\n        totalPrice\n        ipFee\n        penalty\n        createdAt\n        updatedAt\n        payments {\n          bookingId\n          userId\n          orderId\n          paymentType\n          createdAt\n          updatedAt\n          order {\n            cart_details\n            cf_order_id\n            created_at\n            customer_details {\n              customer_id\n              customer_name\n              customer_email\n              customer_phone\n              customer_uid\n            }\n            entity\n            order_amount\n            order_currency\n            order_expiry_time\n            order_id\n            order_meta {\n              return_url\n              notify_url\n              payment_methods\n            }\n            order_note\n            order_splits {\n              vendor_id\n              amount\n              percentage\n              tags\n            }\n            order_status\n            order_tags\n            payment_session_id\n            terminal_data\n          }\n        }\n        otp {\n          bookingId\n          otp\n          expiresAt\n        }\n      }\n      listing {\n        userId\n        type\n        country\n        state\n        district\n        city\n        street\n        pincode\n        latitude\n        longitude\n        name\n        landmark\n        allowedVehicles\n        basePrice\n        pphbi\n        pphcy\n        pphcr\n        plph\n        photos\n        id\n        rating\n        createdAt\n        updatedAt\n        user {\n          firstName\n          lastName\n          timeJoined\n        }\n      }\n    }\n  }\n}\n    "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery GET_TRIPS($userId: String, $buyerBookingsId: String, $status: BookingStatus) {\n  BookingQuery {\n    buyerBookings(userId: $userId, id: $buyerBookingsId, status: $status) {\n      booking {\n        id\n        listingId\n        userId\n        startDate\n        endDate\n        status\n        lockedAt\n        basePrice\n        parkingPrice\n        totalPrice\n        ipFee\n        penalty\n        createdAt\n        updatedAt\n        payments {\n          bookingId\n          userId\n          orderId\n          paymentType\n          createdAt\n          updatedAt\n          order {\n            cart_details\n            cf_order_id\n            created_at\n            customer_details {\n              customer_id\n              customer_name\n              customer_email\n              customer_phone\n              customer_uid\n            }\n            entity\n            order_amount\n            order_currency\n            order_expiry_time\n            order_id\n            order_meta {\n              return_url\n              notify_url\n              payment_methods\n            }\n            order_note\n            order_splits {\n              vendor_id\n              amount\n              percentage\n              tags\n            }\n            order_status\n            order_tags\n            payment_session_id\n            terminal_data\n          }\n        }\n        otp {\n          bookingId\n          otp\n          expiresAt\n        }\n      }\n      listing {\n        userId\n        type\n        country\n        state\n        district\n        city\n        street\n        pincode\n        latitude\n        longitude\n        name\n        landmark\n        allowedVehicles\n        basePrice\n        pphbi\n        pphcy\n        pphcr\n        plph\n        photos\n        id\n        isOpen\n        rating\n        createdAt\n        updatedAt\n        user {\n          userId\n          firstName\n          lastName\n          emails\n          timeJoined\n          phoneNumber\n          kyc {\n            uidai\n            verified\n          }\n          country\n          state\n          district\n          city\n          street\n          pincode\n          latitude\n          longitude\n          name\n          landmark\n          reviews\n          ratings\n        }\n        reviews {\n          id\n          listingId\n          userId\n          rating\n          location\n          cleanliness\n          communication\n          value\n          accuracy\n          description\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n}\n    "): (typeof documents)["\nquery GET_TRIPS($userId: String, $buyerBookingsId: String, $status: BookingStatus) {\n  BookingQuery {\n    buyerBookings(userId: $userId, id: $buyerBookingsId, status: $status) {\n      booking {\n        id\n        listingId\n        userId\n        startDate\n        endDate\n        status\n        lockedAt\n        basePrice\n        parkingPrice\n        totalPrice\n        ipFee\n        penalty\n        createdAt\n        updatedAt\n        payments {\n          bookingId\n          userId\n          orderId\n          paymentType\n          createdAt\n          updatedAt\n          order {\n            cart_details\n            cf_order_id\n            created_at\n            customer_details {\n              customer_id\n              customer_name\n              customer_email\n              customer_phone\n              customer_uid\n            }\n            entity\n            order_amount\n            order_currency\n            order_expiry_time\n            order_id\n            order_meta {\n              return_url\n              notify_url\n              payment_methods\n            }\n            order_note\n            order_splits {\n              vendor_id\n              amount\n              percentage\n              tags\n            }\n            order_status\n            order_tags\n            payment_session_id\n            terminal_data\n          }\n        }\n        otp {\n          bookingId\n          otp\n          expiresAt\n        }\n      }\n      listing {\n        userId\n        type\n        country\n        state\n        district\n        city\n        street\n        pincode\n        latitude\n        longitude\n        name\n        landmark\n        allowedVehicles\n        basePrice\n        pphbi\n        pphcy\n        pphcr\n        plph\n        photos\n        id\n        isOpen\n        rating\n        createdAt\n        updatedAt\n        user {\n          userId\n          firstName\n          lastName\n          emails\n          timeJoined\n          phoneNumber\n          kyc {\n            uidai\n            verified\n          }\n          country\n          state\n          district\n          city\n          street\n          pincode\n          latitude\n          longitude\n          name\n          landmark\n          reviews\n          ratings\n        }\n        reviews {\n          id\n          listingId\n          userId\n          rating\n          location\n          cleanliness\n          communication\n          value\n          accuracy\n          description\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n}\n    "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery GetVendor($vendorId: String!) {\n  VendorQuery {\n    getVendor(vendorId: $vendorId) {\n      name\n      email\n      phone\n      bank {\n        account_number\n        account_holder\n        ifsc\n      }\n      kyc_details {\n        account_type\n        business_type\n        pan\n      }\n      vendor_id\n      status\n      verify_account\n      dashboard_access\n      schedule_option {\n        settlement_schedule_message\n        schedule_id\n        merchant_default\n      }\n      related_docs {\n        doc_name\n        doc_value\n        status\n        remarks\n      }\n    }\n  }\n}\n  "): (typeof documents)["\nquery GetVendor($vendorId: String!) {\n  VendorQuery {\n    getVendor(vendorId: $vendorId) {\n      name\n      email\n      phone\n      bank {\n        account_number\n        account_holder\n        ifsc\n      }\n      kyc_details {\n        account_type\n        business_type\n        pan\n      }\n      vendor_id\n      status\n      verify_account\n      dashboard_access\n      schedule_option {\n        settlement_schedule_message\n        schedule_id\n        merchant_default\n      }\n      related_docs {\n        doc_name\n        doc_value\n        status\n        remarks\n      }\n    }\n  }\n}\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery HostBookings($userId: String, $status: BookingStatus!) {\n  ListingQuery {\n    hostBookings(userId: $userId) {\n      bookings(status: $status) {\n        booking {\n          id\n          listingId\n          userId\n          startDate\n          endDate\n          status\n          lockedAt\n          basePrice\n          parkingPrice\n          totalPrice\n          ipFee\n          penalty\n          createdAt\n          updatedAt\n          user {\n            userId\n            firstName\n            lastName\n            emails\n            timeJoined\n            phoneNumber\n            kyc {\n              uidai\n              verified\n            }\n            country\n            state\n            district\n            city\n            street\n            pincode\n            latitude\n            longitude\n            name\n            landmark\n            reviews\n            ratings\n          }\n          payments {\n            bookingId\n            userId\n            orderId\n            paymentType\n            createdAt\n            updatedAt\n            order {\n              cart_details\n              cf_order_id\n              created_at\n              customer_details {\n                customer_id\n                customer_name\n                customer_email\n                customer_phone\n                customer_uid\n              }\n              entity\n              order_amount\n              order_currency\n              order_expiry_time\n              order_id\n              order_meta {\n                return_url\n                notify_url\n                payment_methods\n              }\n              order_note\n              order_splits {\n                vendor_id\n                amount\n                percentage\n                tags\n              }\n              order_status\n              order_tags\n              payment_session_id\n              terminal_data\n            }\n          }\n          otp {\n            bookingId\n            otp\n            expiresAt\n          }\n        }\n        listing {\n          userId\n          type\n          country\n          state\n          district\n          city\n          street\n          pincode\n          latitude\n          longitude\n          name\n          landmark\n          allowedVehicles\n          basePrice\n          pphbi\n          pphcy\n          pphcr\n          plph\n          photos\n          id\n          isOpen\n          rating\n          createdAt\n          updatedAt\n          user {\n            userId\n            firstName\n            lastName\n            emails\n            timeJoined\n            phoneNumber\n            kyc {\n              uidai\n              verified\n            }\n            country\n            state\n            district\n            city\n            street\n            pincode\n            latitude\n            longitude\n            name\n            landmark\n            reviews\n            ratings\n          }\n          reviews {\n            id\n            listingId\n            userId\n            rating\n            location\n            cleanliness\n            communication\n            value\n            accuracy\n            description\n            createdAt\n            updatedAt\n          }\n        }\n      }\n    }\n  }\n}\n"): (typeof documents)["\nquery HostBookings($userId: String, $status: BookingStatus!) {\n  ListingQuery {\n    hostBookings(userId: $userId) {\n      bookings(status: $status) {\n        booking {\n          id\n          listingId\n          userId\n          startDate\n          endDate\n          status\n          lockedAt\n          basePrice\n          parkingPrice\n          totalPrice\n          ipFee\n          penalty\n          createdAt\n          updatedAt\n          user {\n            userId\n            firstName\n            lastName\n            emails\n            timeJoined\n            phoneNumber\n            kyc {\n              uidai\n              verified\n            }\n            country\n            state\n            district\n            city\n            street\n            pincode\n            latitude\n            longitude\n            name\n            landmark\n            reviews\n            ratings\n          }\n          payments {\n            bookingId\n            userId\n            orderId\n            paymentType\n            createdAt\n            updatedAt\n            order {\n              cart_details\n              cf_order_id\n              created_at\n              customer_details {\n                customer_id\n                customer_name\n                customer_email\n                customer_phone\n                customer_uid\n              }\n              entity\n              order_amount\n              order_currency\n              order_expiry_time\n              order_id\n              order_meta {\n                return_url\n                notify_url\n                payment_methods\n              }\n              order_note\n              order_splits {\n                vendor_id\n                amount\n                percentage\n                tags\n              }\n              order_status\n              order_tags\n              payment_session_id\n              terminal_data\n            }\n          }\n          otp {\n            bookingId\n            otp\n            expiresAt\n          }\n        }\n        listing {\n          userId\n          type\n          country\n          state\n          district\n          city\n          street\n          pincode\n          latitude\n          longitude\n          name\n          landmark\n          allowedVehicles\n          basePrice\n          pphbi\n          pphcy\n          pphcr\n          plph\n          photos\n          id\n          isOpen\n          rating\n          createdAt\n          updatedAt\n          user {\n            userId\n            firstName\n            lastName\n            emails\n            timeJoined\n            phoneNumber\n            kyc {\n              uidai\n              verified\n            }\n            country\n            state\n            district\n            city\n            street\n            pincode\n            latitude\n            longitude\n            name\n            landmark\n            reviews\n            ratings\n          }\n          reviews {\n            id\n            listingId\n            userId\n            rating\n            location\n            cleanliness\n            communication\n            value\n            accuracy\n            description\n            createdAt\n            updatedAt\n          }\n        }\n      }\n    }\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery HOST_LISTINGS($userId: String, $id: String) {\n  ListingQuery {\n    hostListings(userId: $userId, id: $id) {\n      userId\n      type\n      country\n      state\n      district\n      city\n      street\n      pincode\n      latitude\n      longitude\n      name\n      landmark\n      allowedVehicles\n      basePrice\n      pphbi\n      pphcy\n      pphcr\n      plph\n      photos\n      id\n      isOpen\n      rating\n      createdAt\n      updatedAt\n      user {\n        userId\n        firstName\n        lastName\n        emails\n        timeJoined\n        phoneNumber\n        kyc {\n          uidai\n          verified\n        }\n        country\n        state\n        district\n        city\n        street\n        pincode\n        latitude\n        longitude\n        name\n        landmark\n        reviews\n        ratings\n      }\n      reviews {\n        id\n        listingId\n        userId\n        rating\n        location\n        cleanliness\n        communication\n        value\n        accuracy\n        description\n        createdAt\n        updatedAt\n      }\n    }\n  }\n}\n\n"): (typeof documents)["\nquery HOST_LISTINGS($userId: String, $id: String) {\n  ListingQuery {\n    hostListings(userId: $userId, id: $id) {\n      userId\n      type\n      country\n      state\n      district\n      city\n      street\n      pincode\n      latitude\n      longitude\n      name\n      landmark\n      allowedVehicles\n      basePrice\n      pphbi\n      pphcy\n      pphcr\n      plph\n      photos\n      id\n      isOpen\n      rating\n      createdAt\n      updatedAt\n      user {\n        userId\n        firstName\n        lastName\n        emails\n        timeJoined\n        phoneNumber\n        kyc {\n          uidai\n          verified\n        }\n        country\n        state\n        district\n        city\n        street\n        pincode\n        latitude\n        longitude\n        name\n        landmark\n        reviews\n        ratings\n      }\n      reviews {\n        id\n        listingId\n        userId\n        rating\n        location\n        cleanliness\n        communication\n        value\n        accuracy\n        description\n        createdAt\n        updatedAt\n      }\n    }\n  }\n}\n\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery SearchListings(\n  $street: String\n  $vehicleType: Vehicle\n  $startDate: Int\n  $endDate: Int\n) {\n  ListingQuery {\n    searchListings(\n      street: $street\n      vehicleType: $vehicleType\n      startDate: $startDate\n      endDate: $endDate\n    ) {\n      userId\n      type\n      country\n      state\n      district\n      city\n      street\n      pincode\n      latitude\n      longitude\n      name\n      landmark\n      allowedVehicles\n      basePrice\n      pphbi\n      pphcy\n      pphcr\n      plph\n      photos\n      id\n      isOpen\n      rating\n      createdAt\n      updatedAt\n    }\n  }\n}\n\n"): (typeof documents)["\nquery SearchListings(\n  $street: String\n  $vehicleType: Vehicle\n  $startDate: Int\n  $endDate: Int\n) {\n  ListingQuery {\n    searchListings(\n      street: $street\n      vehicleType: $vehicleType\n      startDate: $startDate\n      endDate: $endDate\n    ) {\n      userId\n      type\n      country\n      state\n      district\n      city\n      street\n      pincode\n      latitude\n      longitude\n      name\n      landmark\n      allowedVehicles\n      basePrice\n      pphbi\n      pphcy\n      pphcr\n      plph\n      photos\n      id\n      isOpen\n      rating\n      createdAt\n      updatedAt\n    }\n  }\n}\n\n"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;